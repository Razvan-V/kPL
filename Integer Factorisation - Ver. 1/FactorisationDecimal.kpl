type GEN {
	max{
		<65x & >=1GO: x, GO ->  [3x] (GEN) [GO_STEP2, new] (LIST)  .
	}
}

type LIST{
	max{
		=1x : x -> {} .
		=1x : z -> {} .
		<=1x: next -> {} .
		<=1x : {GO_STEP2} -> {GO} (MAIN).
		
		<=1x: add2 -> {} .
	}
	max{
		>1x: {new} -> {add2, next} .
		>1x & <1add2: {x} ->  {x,y} .
	}
	max{
		<=1x: new  -> # .
	}		

	max{
		>1x & <115y: {add2} -> {2y, add2,next} .
	}
	
	max{
		=1GO_STEP2 : GO_STEP2 -> GO (MAIN).
	}
	
	max{
		=next : next -> [](LIST) [] (MUL) .
	}

}

type MAIN{
	max{
		{GO} -> {GO} (GEN) .
	}
	max{
		a -> a (R) .
	}
	
	max{
		b -> b (R) .
	}
	max{
		=TRUE : TRUE -> TRUE (R) .
	}
	max{
		STOP -> # .
	}
}

type MUL{
	max{
		>1count : next -> {} .
	}
	max{
		>x & >=next: x -> {x, count, a} .
		>y & >=next: y -> {y,b} .
	}

	max{
		>1count : y-> y, q  .
		=1count : y-> q .
	}
	choice{
		>1count : {1count} -> {} .
		=1count : {1count} -> {} .
	}
	max{
		>q & <count : x->{comp} .
	}
	max{
		>comp: z,q -> {} .
	}
	choice{
		>comp & <z & <q & <TRUE & <FALSE : comp-> TRUE .
	}
	choice{
		>comp & >=z & <q & <TRUE & <FALSE : comp-> FALSE .
	}
	choice{
		>comp & <z & >=q & <TRUE & <FALSE : comp-> FALSE .
	}
	max{
		=TRUE : {a} -> {a} (MAIN) .
	}
	max{
		=TRUE : {b} -> {b} (MAIN) .
	}
	max{
		>=add2: {TRUE, add2} -> TRUE, TRUE (MAIN), STOP (MAIN).
	}
}




main {GO, s} (MAIN) .
gen {2x, 6893z} (GEN) .
gen - main - result {} (R).



